import { Service } from '@liquidmetal-ai/raindrop-framework';
import { Env } from './raindrop.gen';
import { activities } from '../sql/activity-seed-data';
import { USER_DB_SCHEMA } from '../sql/user-db';
import {
  generateToken,
  createSession,
  createSessionCookie,
  getSessionFromRequest,
  clearSessionCookie,
  sendEmail,
  generateMagicLinkEmail
} from './auth';
import { getGlobalStyles, getNavigation } from './ui-components';

interface UserProfile {
  interests: string[];
  physicalCapability: number;
  socialPreference: 'solo' | 'small' | 'medium' | 'large' | 'any';
  costPreference: 'free' | 'low' | 'medium' | 'high' | 'any';
  unavailableTimes?: string[];
}

interface Activity {
  id: string;
  name: string;
  description: string;
  category: string;
  location: string;
  venue: string;
  schedule_type: string;
  schedule_details: string;
  difficulty_level: number;
  social_size: string;
  cost: string;
  health_requirements: string;
  data_source: string;
}

interface ScoredActivity extends Activity {
  score: number;
  matchReasons: string[];
}

export default class extends Service<Env> {
  async fetch(request: Request): Promise<Response> {
    const url = new URL(request.url);

    // Test endpoint to verify service is running
    if (url.pathname === '/health') {
      return new Response('OK', { status: 200 });
    }

    // Authentication endpoints
    if (url.pathname === '/auth/send-magic-link' && request.method === 'POST') {
      return this.sendMagicLink(request);
    }

    if (url.pathname === '/auth/verify' && request.method === 'GET') {
      return this.verifyMagicLink(request);
    }

    if (url.pathname === '/auth/logout' && request.method === 'POST') {
      return this.logout(request);
    }

    if (url.pathname === '/api/profile' && request.method === 'GET') {
      return this.getProfile(request);
    }

    if (url.pathname === '/api/profile' && request.method === 'PUT') {
      return this.updateProfile(request);
    }

    // Seed activities endpoint
    if (url.pathname === '/seed-activities' && request.method === 'POST') {
      return this.seedActivities();
    }

    // Create schema endpoint
    if (url.pathname === '/create-schema' && request.method === 'POST') {
      return this.createSchema();
    }

    // Initialize user database schema
    if (url.pathname === '/init-user-db' && request.method === 'POST') {
      return this.initUserDatabase();
    }

    // Query activities endpoint (test)
    if (url.pathname === '/api/activities' && request.method === 'GET') {
      return this.getActivities();
    }

    // Test recommendations endpoint (proxy to activity-matcher)
    if (url.pathname === '/api/test-recommendations' && request.method === 'POST') {
      return this.testRecommendations(request);
    }

    // Serve HTML UI
    if (url.pathname === '/' && request.method === 'GET') {
      return this.serveLoginPage();
    }

    if (url.pathname === '/dashboard' && request.method === 'GET') {
      return this.serveDashboard(request);
    }

    if (url.pathname === '/recommendations' && request.method === 'GET') {
      return this.serveRecommendationsPage(request);
    }

    if (url.pathname === '/my-activities' && request.method === 'GET') {
      return this.serveMyActivitiesPage(request);
    }

    if (url.pathname === '/chat' && request.method === 'GET') {
      return this.serveChatPage(request);
    }

    if (url.pathname === '/profile' && request.method === 'GET') {
      return this.serveProfilePage(request);
    }

    // Default response
    return new Response('RetireWell API - Ready to serve');
  }

  private serveLoginPage(): Response {
    const html = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Sign in to RetireWell</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 20px;
    }
    .container {
      background: white;
      border-radius: 16px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      padding: 50px;
      max-width: 450px;
      width: 100%;
    }
    h1 {
      color: #667eea;
      margin-bottom: 10px;
      font-size: 2.5em;
      text-align: center;
    }
    .tagline {
      color: #666;
      margin-bottom: 40px;
      text-align: center;
      font-size: 1.1em;
    }
    .form-group {
      margin-bottom: 20px;
    }
    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #333;
    }
    input[type="email"] {
      width: 100%;
      padding: 14px;
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      font-size: 16px;
      transition: border-color 0.3s;
    }
    input:focus {
      outline: none;
      border-color: #667eea;
    }
    button {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      padding: 15px;
      font-size: 18px;
      font-weight: 600;
      border-radius: 8px;
      cursor: pointer;
      width: 100%;
      transition: transform 0.2s;
    }
    button:hover {
      transform: translateY(-2px);
    }
    button:disabled {
      opacity: 0.6;
      cursor: not-allowed;
    }
    .message {
      margin-top: 20px;
      padding: 15px;
      border-radius: 8px;
      text-align: center;
    }
    .success {
      background: #d4edda;
      color: #155724;
      border: 1px solid #c3e6cb;
    }
    .error {
      background: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>RetireWell</h1>
    <p class="tagline">Personalized activity recommendations for an active retirement</p>
    <form id="loginForm">
      <div class="form-group">
        <label for="email">Email Address</label>
        <input type="email" id="email" name="email" required placeholder="you@example.com" />
      </div>
      <button type="submit" id="submitBtn">Send Magic Link</button>
    </form>
    <div id="message"></div>
  </div>
  <script>
    document.getElementById('loginForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const email = document.getElementById('email').value;
      const btn = document.getElementById('submitBtn');
      const msg = document.getElementById('message');

      btn.disabled = true;
      btn.textContent = 'Sending...';

      try {
        const response = await fetch('/auth/send-magic-link', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ email })
        });

        const data = await response.json();

        if (data.success) {
          msg.innerHTML = '<div class="message success">✓ Magic link sent! Check your email and click the link to sign in.</div>';
          document.getElementById('loginForm').style.display = 'none';
        } else {
          msg.innerHTML = \`<div class="message error">✗ \${data.error}</div>\`;
          btn.disabled = false;
          btn.textContent = 'Send Magic Link';
        }
      } catch (error) {
        msg.innerHTML = '<div class="message error">✗ Network error. Please try again.</div>';
        btn.disabled = false;
        btn.textContent = 'Send Magic Link';
      }
    });
  </script>
</body>
</html>`;

    return new Response(html, {
      headers: { 'Content-Type': 'text/html' }
    });
  }

  private serveDashboard(request: Request): Response {
    const session = getSessionFromRequest(request);

    if (!session) {
      return new Response(null, {
        status: 302,
        headers: { 'Location': '/' }
      });
    }

    const html = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Dashboard - RetireWell</title>
  <style>
    ${getGlobalStyles()}
  </style>
</head>
<body>
  ${getNavigation('/dashboard', session.name)}
  <div class="container">
    <div class="page-header">
      <h2>Welcome back, ${session.name}!</h2>
      <p>Your personalized activity dashboard for an active retirement</p>
    </div>
    <div class="card">
      <h3>Quick Stats</h3>
      <p>Track your engagement and progress across activities</p>
      <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-top: 20px;">
        <div style="text-align: center; padding: 20px; background: #e0f2fe; border-radius: 8px;">
          <div style="font-size: 36px; font-weight: 700; color: #0891b2;">0</div>
          <div style="color: #64748b; margin-top: 5px;">Activities Completed</div>
        </div>
        <div style="text-align: center; padding: 20px; background: #ffedd5; border-radius: 8px;">
          <div style="font-size: 36px; font-weight: 700; color: #f97316;">0</div>
          <div style="color: #64748b; margin-top: 5px;">Upcoming This Week</div>
        </div>
        <div style="text-align: center; padding: 20px; background: #fef3c7; border-radius: 8px;">
          <div style="font-size: 36px; font-weight: 700; color: #f59e0b;">0</div>
          <div style="color: #64748b; margin-top: 5px;">Recommendations</div>
        </div>
      </div>
    </div>
    <div class="card">
      <h3>Get Started</h3>
      <p>Start exploring personalized activities tailored to your interests and lifestyle</p>
      <div style="display: flex; gap: 15px; margin-top: 20px; flex-wrap: wrap;">
        <a href="/profile" class="btn">Complete Your Profile</a>
        <a href="/recommendations" class="btn btn-accent">View Recommendations</a>
      </div>
    </div>
  </div>
</body>
</html>`;

    return new Response(html, {
      headers: { 'Content-Type': 'text/html' }
    });
  }

  private serveRecommendationsPage(request: Request): Response {
    const session = getSessionFromRequest(request);

    if (!session) {
      return new Response(null, {
        status: 302,
        headers: { 'Location': '/' }
      });
    }

    const html = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Recommendations - RetireWell</title>
  <style>
    ${getGlobalStyles()}
    .activity-card {
      background: white;
      border-radius: 12px;
      padding: 25px;
      margin-bottom: 20px;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
      border-left: 4px solid #0891b2;
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .activity-card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }
    .activity-card h3 {
      color: #1e293b;
      margin-bottom: 10px;
      font-size: 20px;
    }
    .activity-meta {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      margin: 15px 0;
      font-size: 14px;
      color: #64748b;
    }
    .activity-actions {
      display: flex;
      gap: 10px;
      margin-top: 15px;
    }
    .btn-small {
      padding: 8px 16px;
      font-size: 14px;
    }
  </style>
</head>
<body>
  ${getNavigation('/recommendations', session.name)}
  <div class="container">
    <div class="page-header">
      <h2>Your Personalized Recommendations</h2>
      <p>Activities curated based on your interests and preferences</p>
    </div>
    <div class="empty-state">
      <h3>No Recommendations Yet</h3>
      <p>Complete your profile to get personalized activity recommendations</p>
      <a href="/profile" class="btn" style="margin-top: 20px;">Set Up Your Profile</a>
    </div>
  </div>
</body>
</html>`;

    return new Response(html, {
      headers: { 'Content-Type': 'text/html' }
    });
  }

  private serveMyActivitiesPage(request: Request): Response {
    const session = getSessionFromRequest(request);

    if (!session) {
      return new Response(null, {
        status: 302,
        headers: { 'Location': '/' }
      });
    }

    const html = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>My Activities - RetireWell</title>
  <style>
    ${getGlobalStyles()}
    .calendar-view {
      background: white;
      border-radius: 12px;
      padding: 25px;
      margin-bottom: 20px;
    }
    .week-view {
      display: grid;
      grid-template-columns: repeat(7, 1fr);
      gap: 10px;
      margin-top: 20px;
    }
    .day-card {
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      padding: 15px 10px;
      text-align: center;
      min-height: 120px;
    }
    .day-header {
      font-weight: 600;
      color: #64748b;
      margin-bottom: 5px;
      font-size: 14px;
    }
    .day-number {
      font-size: 24px;
      color: #1e293b;
      margin-bottom: 10px;
    }
  </style>
</head>
<body>
  ${getNavigation('/my-activities', session.name)}
  <div class="container">
    <div class="page-header">
      <h2>My Activities</h2>
      <p>Track your scheduled activities and commitments</p>
    </div>
    <div class="card">
      <h3>This Week</h3>
      <div class="empty-state">
        <p>No activities scheduled yet</p>
        <a href="/recommendations" class="btn" style="margin-top: 20px;">Browse Activities</a>
      </div>
    </div>
    <div class="card">
      <h3>Past Activities</h3>
      <div class="empty-state">
        <p>Your completed activities will appear here</p>
      </div>
    </div>
  </div>
</body>
</html>`;

    return new Response(html, {
      headers: { 'Content-Type': 'text/html' }
    });
  }

  private serveChatPage(request: Request): Response {
    const session = getSessionFromRequest(request);

    if (!session) {
      return new Response(null, {
        status: 302,
        headers: { 'Location': '/' }
      });
    }

    const html = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>AI Assistant - RetireWell</title>
  <style>
    ${getGlobalStyles()}
    .chat-container {
      background: white;
      border-radius: 12px;
      padding: 0;
      height: 600px;
      display: flex;
      flex-direction: column;
    }
    .chat-messages {
      flex: 1;
      padding: 25px;
      overflow-y: auto;
    }
    .chat-input-area {
      border-top: 1px solid #e2e8f0;
      padding: 20px;
      display: flex;
      gap: 10px;
    }
    .chat-input {
      flex: 1;
      padding: 12px;
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      font-size: 16px;
      font-family: inherit;
    }
    .chat-input:focus {
      outline: none;
      border-color: #0891b2;
    }
    .message {
      margin-bottom: 15px;
      padding: 15px;
      border-radius: 8px;
    }
    .message.ai {
      background: #e0f2fe;
      margin-right: 50px;
    }
    .message.user {
      background: #ffedd5;
      margin-left: 50px;
    }
  </style>
</head>
<body>
  ${getNavigation('/chat', session.name)}
  <div class="container">
    <div class="page-header">
      <h2>AI Assistant</h2>
      <p>Get personalized advice and answers about activities</p>
    </div>
    <div class="chat-container">
      <div class="chat-messages">
        <div class="message ai">
          <strong>RetireWell Assistant</strong>
          <p style="margin-top: 5px;">Hello! I'm here to help you discover and plan activities. Ask me anything about staying active in retirement!</p>
        </div>
      </div>
      <div class="chat-input-area">
        <input type="text" class="chat-input" placeholder="Ask me anything..." disabled />
        <button class="btn" disabled>Send</button>
      </div>
    </div>
    <p style="text-align: center; color: #94a3b8; margin-top: 15px; font-size: 14px;">
      AI Assistant coming soon - Powered by Cerebras
    </p>
  </div>
</body>
</html>`;

    return new Response(html, {
      headers: { 'Content-Type': 'text/html' }
    });
  }

  private serveProfilePage(request: Request): Response {
    const session = getSessionFromRequest(request);

    if (!session) {
      return new Response(null, {
        status: 302,
        headers: { 'Location': '/' }
      });
    }

    const html = `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Profile - RetireWell</title>
  <style>
    ${getGlobalStyles()}
    .form-group {
      margin-bottom: 20px;
    }
    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #1e293b;
    }
    input, select, textarea {
      width: 100%;
      padding: 12px;
      border: 2px solid #e2e8f0;
      border-radius: 8px;
      font-size: 16px;
      font-family: inherit;
      transition: border-color 0.2s;
    }
    input:focus, select:focus, textarea:focus {
      outline: none;
      border-color: #0891b2;
    }
    textarea {
      resize: vertical;
      min-height: 100px;
    }
    .checkbox-group {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 10px;
      margin-top: 10px;
    }
    .checkbox-label {
      display: flex;
      align-items: center;
      font-weight: normal;
      cursor: pointer;
    }
    .checkbox-label input {
      width: auto;
      margin-right: 8px;
    }
    .profile-section {
      background: white;
      border-radius: 12px;
      padding: 30px;
      margin-bottom: 20px;
    }
  </style>
</head>
<body>
  ${getNavigation('/profile', session.name)}
  <div class="container">
    <div class="page-header">
      <h2>Your Profile</h2>
      <p>Customize your preferences for better recommendations</p>
    </div>
    <form id="profileForm">
      <div class="profile-section">
        <h3>Personal Information</h3>
        <div class="form-group">
          <label for="name">Name</label>
          <input type="text" id="name" name="name" value="${session.name}" required />
        </div>
        <div class="form-group">
          <label for="age">Age</label>
          <input type="number" id="age" name="age" min="50" max="120" placeholder="65" />
        </div>
        <div class="form-group">
          <label for="location">Location</label>
          <input type="text" id="location" name="location" placeholder="Indianapolis, IN" />
        </div>
      </div>

      <div class="profile-section">
        <h3>Activity Preferences</h3>
        <div class="form-group">
          <label>What activities interest you? (select all that apply)</label>
          <div class="checkbox-group">
            <label class="checkbox-label"><input type="checkbox" name="interests" value="fitness"> Fitness & Wellness</label>
            <label class="checkbox-label"><input type="checkbox" name="interests" value="arts-culture"> Arts & Culture</label>
            <label class="checkbox-label"><input type="checkbox" name="interests" value="social"> Social Activities</label>
            <label class="checkbox-label"><input type="checkbox" name="interests" value="volunteering"> Volunteering</label>
            <label class="checkbox-label"><input type="checkbox" name="interests" value="learning"> Learning & Education</label>
            <label class="checkbox-label"><input type="checkbox" name="interests" value="hobbies"> Hobbies & Crafts</label>
          </div>
        </div>

        <div class="form-group">
          <label for="health_mobility">Physical Mobility Level</label>
          <select id="health_mobility" name="health_mobility">
            <option value="high">High - I'm very active and mobile</option>
            <option value="medium" selected>Medium - I can handle moderate activity</option>
            <option value="low">Low - I prefer low-impact activities</option>
          </select>
        </div>

        <div class="form-group">
          <label for="social_preference">Preferred Social Setting</label>
          <select id="social_preference" name="social_preference">
            <option value="solo">Solo activities</option>
            <option value="small-groups" selected>Small groups (2-10 people)</option>
            <option value="large-groups">Large groups (10+ people)</option>
            <option value="one-on-one">One-on-one interactions</option>
          </select>
        </div>

        <div class="form-group">
          <label for="health_constraints">Health Considerations (Optional)</label>
          <textarea id="health_constraints" name="health_constraints" placeholder="Any health conditions or limitations we should consider when recommending activities..."></textarea>
        </div>

        <div class="form-group">
          <label for="existing_routines">Current Routines (Optional)</label>
          <textarea id="existing_routines" name="existing_routines" placeholder="Tell us about your current activities and routines..."></textarea>
        </div>
      </div>

      <button type="submit" class="btn">Save Profile</button>
    </form>
    <div id="message" style="margin-top: 20px;"></div>
  </div>

  <script>
    // Load existing profile data
    fetch('/api/profile')
      .then(res => res.json())
      .then(data => {
        if (data.success && data.user) {
          if (data.user.age) document.getElementById('age').value = data.user.age;
          if (data.user.location) document.getElementById('location').value = data.user.location;

          if (data.profile) {
            const p = data.profile;
            if (p.health_mobility) document.getElementById('health_mobility').value = p.health_mobility;
            if (p.social_preference) document.getElementById('social_preference').value = p.social_preference;
            if (p.health_constraints) document.getElementById('health_constraints').value = p.health_constraints;
            if (p.existing_routines) document.getElementById('existing_routines').value = p.existing_routines;

            if (p.interests) {
              const interests = p.interests.split(',');
              interests.forEach(interest => {
                const checkbox = document.querySelector(\`input[name="interests"][value="\${interest.trim()}"]\`);
                if (checkbox) checkbox.checked = true;
              });
            }
          }
        }
      });

    document.getElementById('profileForm').addEventListener('submit', async (e) => {
      e.preventDefault();
      const formData = new FormData(e.target);
      const interests = Array.from(document.querySelectorAll('input[name="interests"]:checked'))
        .map(el => el.value);

      const profileData = {
        name: formData.get('name'),
        age: formData.get('age') ? parseInt(formData.get('age')) : null,
        location: formData.get('location'),
        profile: {
          health_mobility: formData.get('health_mobility'),
          health_constraints: formData.get('health_constraints'),
          interests: interests.join(','),
          social_preference: formData.get('social_preference'),
          existing_routines: formData.get('existing_routines')
        }
      };

      try {
        const response = await fetch('/api/profile', {
          method: 'PUT',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(profileData)
        });

        const result = await response.json();
        const msgDiv = document.getElementById('message');

        if (result.success) {
          msgDiv.innerHTML = '<div class="card" style="background: #d4edda; border-left: 4px solid #10b981;">✓ Profile saved successfully!</div>';
        } else {
          msgDiv.innerHTML = \`<div class="card" style="background: #f8d7da; border-left: 4px solid #ef4444;">✗ Error: \${result.error}</div>\`;
        }
      } catch (error) {
        msgDiv.innerHTML = '<div class="card" style="background: #f8d7da; border-left: 4px solid #ef4444;">✗ Network error. Please try again.</div>';
      }
    });
  </script>
</body>
</html>`;

    return new Response(html, {
      headers: { 'Content-Type': 'text/html' }
    });
  }

  private serveOldHomePage(): Response {
    const html = `
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>RetireWell - Personalized Activity Recommendations</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      min-height: 100vh;
      padding: 20px;
    }
    .container {
      max-width: 900px;
      margin: 0 auto;
      background: white;
      border-radius: 16px;
      box-shadow: 0 20px 60px rgba(0,0,0,0.3);
      padding: 40px;
    }
    h1 {
      color: #667eea;
      margin-bottom: 10px;
      font-size: 2.5em;
    }
    .tagline {
      color: #666;
      margin-bottom: 30px;
      font-size: 1.1em;
    }
    .form-group {
      margin-bottom: 20px;
    }
    label {
      display: block;
      margin-bottom: 8px;
      font-weight: 600;
      color: #333;
    }
    select, input {
      width: 100%;
      padding: 12px;
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      font-size: 16px;
      transition: border-color 0.3s;
    }
    select:focus, input:focus {
      outline: none;
      border-color: #667eea;
    }
    .checkbox-group {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 10px;
    }
    .checkbox-group label {
      display: flex;
      align-items: center;
      font-weight: normal;
      cursor: pointer;
    }
    .checkbox-group input[type="checkbox"] {
      width: auto;
      margin-right: 8px;
    }
    button {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      padding: 15px 40px;
      font-size: 18px;
      font-weight: 600;
      border-radius: 8px;
      cursor: pointer;
      transition: transform 0.2s;
      width: 100%;
    }
    button:hover {
      transform: translateY(-2px);
    }
    button:active {
      transform: translateY(0);
    }
    .recommendations {
      margin-top: 40px;
    }
    .activity-card {
      background: #f8f9fa;
      border-radius: 12px;
      padding: 20px;
      margin-bottom: 20px;
      border-left: 4px solid #667eea;
    }
    .activity-card h3 {
      color: #333;
      margin-bottom: 10px;
    }
    .activity-card .description {
      color: #666;
      margin-bottom: 15px;
      line-height: 1.6;
    }
    .activity-meta {
      display: flex;
      flex-wrap: wrap;
      gap: 15px;
      margin-bottom: 10px;
    }
    .meta-item {
      display: flex;
      align-items: center;
      font-size: 14px;
      color: #555;
    }
    .match-reasons {
      margin-top: 10px;
      padding-top: 10px;
      border-top: 1px solid #ddd;
    }
    .match-reasons .reason {
      display: inline-block;
      background: #e8f0fe;
      color: #1967d2;
      padding: 4px 12px;
      border-radius: 16px;
      font-size: 13px;
      margin: 4px;
    }
    .score {
      float: right;
      background: #667eea;
      color: white;
      padding: 6px 14px;
      border-radius: 20px;
      font-weight: 600;
      font-size: 14px;
    }
    .loading {
      text-align: center;
      padding: 40px;
      color: #667eea;
      font-size: 18px;
    }
    .error {
      background: #fee;
      border-left: 4px solid #f44336;
      padding: 20px;
      border-radius: 8px;
      color: #c62828;
    }
  </style>
</head>
<body>
  <div class="container">
    <h1>RetireWell</h1>
    <p class="tagline">Discover personalized activities for an active, fulfilling retirement in Indianapolis</p>

    <form id="profileForm">
      <div class="form-group">
        <label>What activities interest you? (select all that apply)</label>
        <div class="checkbox-group">
          <label><input type="checkbox" name="interests" value="fitness"> Fitness & Wellness</label>
          <label><input type="checkbox" name="interests" value="arts-culture"> Arts & Culture</label>
          <label><input type="checkbox" name="interests" value="social"> Social Activities</label>
          <label><input type="checkbox" name="interests" value="volunteering"> Volunteering</label>
          <label><input type="checkbox" name="interests" value="learning"> Learning & Education</label>
          <label><input type="checkbox" name="interests" value="hobbies"> Hobbies & Crafts</label>
        </div>
      </div>

      <div class="form-group">
        <label for="physicalCapability">Physical Activity Level (1=Low, 5=High)</label>
        <select id="physicalCapability" name="physicalCapability" required>
          <option value="1">1 - Minimal physical activity (seated activities preferred)</option>
          <option value="2" selected>2 - Light activity (short walks, gentle movement)</option>
          <option value="3">3 - Moderate activity (regular exercise, hiking)</option>
          <option value="4">4 - Active (vigorous exercise, sports)</option>
          <option value="5">5 - Very active (intense physical activities)</option>
        </select>
      </div>

      <div class="form-group">
        <label for="socialPreference">Preferred Group Size</label>
        <select id="socialPreference" name="socialPreference" required>
          <option value="solo">Solo activities</option>
          <option value="small">Small groups (2-10 people)</option>
          <option value="medium" selected>Medium groups (10-30 people)</option>
          <option value="large">Large groups (30+ people)</option>
          <option value="any">Any group size</option>
        </select>
      </div>

      <div class="form-group">
        <label for="costPreference">Cost Preference</label>
        <select id="costPreference" name="costPreference" required>
          <option value="free">Free only</option>
          <option value="low">Low cost ($1-$20)</option>
          <option value="medium">Medium cost ($20-$50)</option>
          <option value="high">Higher cost ($50+)</option>
          <option value="any" selected>Any cost</option>
        </select>
      </div>

      <button type="submit">Get My Recommendations</button>
    </form>

    <div id="results"></div>
  </div>

  <script>
    document.getElementById('profileForm').addEventListener('submit', async (e) => {
      e.preventDefault();

      const formData = new FormData(e.target);
      const interests = Array.from(document.querySelectorAll('input[name="interests"]:checked'))
        .map(el => el.value);

      if (interests.length === 0) {
        alert('Please select at least one interest!');
        return;
      }

      const profile = {
        interests,
        physicalCapability: parseInt(formData.get('physicalCapability')),
        socialPreference: formData.get('socialPreference'),
        costPreference: formData.get('costPreference'),
        unavailableTimes: []
      };

      const resultsDiv = document.getElementById('results');
      resultsDiv.innerHTML = '<div class="loading">Finding your perfect activities...</div>';

      try {
        const response = await fetch('/api/test-recommendations', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(profile)
        });

        const data = await response.json();

        if (data.success) {
          let html = '<div class="recommendations"><h2>Your Personalized Recommendations</h2>';
          data.recommendations.forEach(activity => {
            html += \`
              <div class="activity-card">
                <span class="score">Score: \${activity.score}</span>
                <h3>\${activity.name}</h3>
                <p class="description">\${activity.description}</p>
                <div class="activity-meta">
                  <div class="meta-item">📍 \${activity.location}</div>
                  <div class="meta-item">🏢 \${activity.venue}</div>
                  <div class="meta-item">💰 \${activity.cost}</div>
                  <div class="meta-item">👥 \${activity.social_size}</div>
                  <div class="meta-item">⚡ Difficulty: \${activity.difficulty_level}/5</div>
                </div>
                <div class="meta-item">📅 \${activity.schedule_details}</div>
                <div class="match-reasons">
                  \${activity.matchReasons.map(r => \`<span class="reason">\${r}</span>\`).join('')}
                </div>
              </div>
            \`;
          });
          html += '</div>';
          resultsDiv.innerHTML = html;
        } else {
          resultsDiv.innerHTML = \`<div class="error">Error: \${data.error}</div>\`;
        }
      } catch (error) {
        resultsDiv.innerHTML = \`<div class="error">Error: \${error.message}</div>\`;
      }
    });
  </script>
</body>
</html>
    `;

    return new Response(html, {
      headers: { 'Content-Type': 'text/html' }
    });
  }

  // Authentication methods
  private async sendMagicLink(request: Request): Promise<Response> {
    try {
      const { email } = await request.json() as { email: string };

      if (!email || !email.includes('@')) {
        return new Response(JSON.stringify({
          success: false,
          error: 'Valid email required'
        }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        });
      }

      // Generate magic link token
      const token = generateToken();
      const expiresAt = Date.now() + (15 * 60 * 1000); // 15 minutes

      // Store token in database
      await this.env.USER_DB.executeQuery({
        sqlQuery: `INSERT OR REPLACE INTO magic_tokens (email, token, expires_at, created_at)
                   VALUES ('${email}', '${token}', ${expiresAt}, ${Date.now()})`
      });

      // Get base URL from request
      const baseUrl = new URL(request.url).origin;

      // Send magic link email
      // TODO: Move to proper secret management
      const resendApiKey = 're_KivjUso8_DXQcTkp8CagZUw3zFYRpvrT7';
      if (!resendApiKey) {
        return new Response(JSON.stringify({
          success: false,
          error: 'Email service not configured'
        }), {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        });
      }

      const emailHtml = generateMagicLinkEmail(email, token, baseUrl);
      const emailResult = await sendEmail({
        to: email,
        subject: 'Sign in to RetireWell',
        html: emailHtml
      }, resendApiKey);

      if (!emailResult.success) {
        return new Response(JSON.stringify({
          success: false,
          error: `Failed to send email: ${emailResult.error || 'Unknown error'}`
        }), {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        });
      }

      return new Response(JSON.stringify({
        success: true,
        message: 'Magic link sent! Check your email.'
      }), {
        headers: { 'Content-Type': 'application/json' }
      });

    } catch (error) {
      return new Response(JSON.stringify({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  }

  private async verifyMagicLink(request: Request): Promise<Response> {
    try {
      const url = new URL(request.url);
      const token = url.searchParams.get('token');

      if (!token) {
        return new Response('Invalid or missing token', { status: 400 });
      }

      // Check token in database
      const result = await this.env.USER_DB.executeQuery({
        sqlQuery: `SELECT * FROM magic_tokens WHERE token = '${token}' AND expires_at > ${Date.now()} LIMIT 1`
      });

      if (result.status !== 200 || !result.results) {
        return new Response('Invalid or expired magic link', { status: 401 });
      }

      const tokens = JSON.parse(result.results);
      if (tokens.length === 0) {
        return new Response('Invalid or expired magic link', { status: 401 });
      }

      const { email } = tokens[0];

      // Get or create user
      const userResult = await this.env.USER_DB.executeQuery({
        sqlQuery: `SELECT * FROM users WHERE email = '${email}' LIMIT 1`
      });

      let userId: string;
      let name: string;

      if (userResult.status === 200 && userResult.results) {
        const users = JSON.parse(userResult.results);
        if (users.length > 0) {
          userId = users[0].id;
          name = users[0].name;
        } else {
          // Create new user
          userId = generateToken();
          name = email.split('@')[0];
          await this.env.USER_DB.executeQuery({
            sqlQuery: `INSERT INTO users (id, email, name, created_at, updated_at)
                       VALUES ('${userId}', '${email}', '${name}', ${Date.now()}, ${Date.now()})`
          });
        }
      } else {
        return new Response('Database error', { status: 500 });
      }

      // Delete used token
      await this.env.USER_DB.executeQuery({
        sqlQuery: `DELETE FROM magic_tokens WHERE token = '${token}'`
      });

      // Create session
      const session = createSession(userId, email, name);
      const sessionCookie = createSessionCookie(session);

      // Redirect to dashboard
      return new Response(null, {
        status: 302,
        headers: {
          'Location': '/dashboard',
          'Set-Cookie': sessionCookie
        }
      });

    } catch (error) {
      return new Response(`Error: ${error instanceof Error ? error.message : 'Unknown error'}`, {
        status: 500
      });
    }
  }

  private async logout(request: Request): Promise<Response> {
    return new Response(JSON.stringify({ success: true }), {
      headers: {
        'Content-Type': 'application/json',
        'Set-Cookie': clearSessionCookie()
      }
    });
  }

  private async getProfile(request: Request): Promise<Response> {
    const session = getSessionFromRequest(request);

    if (!session) {
      return new Response(JSON.stringify({
        success: false,
        error: 'Not authenticated'
      }), {
        status: 401,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    try {
      // Get user
      const userResult = await this.env.USER_DB.executeQuery({
        sqlQuery: `SELECT * FROM users WHERE id = '${session.userId}' LIMIT 1`
      });

      if (userResult.status !== 200 || !userResult.results) {
        return new Response(JSON.stringify({
          success: false,
          error: 'User not found'
        }), {
          status: 404,
          headers: { 'Content-Type': 'application/json' }
        });
      }

      const users = JSON.parse(userResult.results);
      const user = users[0];

      // Get profile
      const profileResult = await this.env.USER_DB.executeQuery({
        sqlQuery: `SELECT * FROM profiles WHERE user_id = '${session.userId}' LIMIT 1`
      });

      let profile = null;
      if (profileResult.status === 200 && profileResult.results) {
        const profiles = JSON.parse(profileResult.results);
        if (profiles.length > 0) {
          profile = profiles[0];
        }
      }

      return new Response(JSON.stringify({
        success: true,
        user: {
          id: user.id,
          email: user.email,
          name: user.name,
          age: user.age,
          location: user.location
        },
        profile: profile ? {
          health_mobility: profile.health_mobility,
          health_constraints: profile.health_constraints,
          interests: profile.interests,
          social_preference: profile.social_preference,
          time_preferences: profile.time_preferences,
          existing_routines: profile.existing_routines
        } : null
      }), {
        headers: { 'Content-Type': 'application/json' }
      });

    } catch (error) {
      return new Response(JSON.stringify({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  }

  private async updateProfile(request: Request): Promise<Response> {
    const session = getSessionFromRequest(request);

    if (!session) {
      return new Response(JSON.stringify({
        success: false,
        error: 'Not authenticated'
      }), {
        status: 401,
        headers: { 'Content-Type': 'application/json' }
      });
    }

    try {
      const data = await request.json() as any;

      // Update user info
      if (data.name || data.age || data.location) {
        const updates = [];
        if (data.name) updates.push(`name = '${data.name.replace(/'/g, "''")}'`);
        if (data.age) updates.push(`age = ${data.age}`);
        if (data.location) updates.push(`location = '${data.location.replace(/'/g, "''")}'`);
        updates.push(`updated_at = ${Date.now()}`);

        await this.env.USER_DB.executeQuery({
          sqlQuery: `UPDATE users SET ${updates.join(', ')} WHERE id = '${session.userId}'`
        });
      }

      // Update or create profile
      if (data.profile) {
        const p = data.profile;
        const profileId = generateToken();

        // Check if profile exists
        const checkResult = await this.env.USER_DB.executeQuery({
          sqlQuery: `SELECT id FROM profiles WHERE user_id = '${session.userId}' LIMIT 1`
        });

        const profileExists = checkResult.status === 200 &&
                             checkResult.results &&
                             JSON.parse(checkResult.results).length > 0;

        if (profileExists) {
          // Update existing profile
          const updates = [];
          if (p.health_mobility) updates.push(`health_mobility = '${p.health_mobility}'`);
          if (p.health_constraints) updates.push(`health_constraints = '${p.health_constraints.replace(/'/g, "''")}'`);
          if (p.interests) updates.push(`interests = '${p.interests.replace(/'/g, "''")}'`);
          if (p.social_preference) updates.push(`social_preference = '${p.social_preference}'`);
          if (p.time_preferences) updates.push(`time_preferences = '${p.time_preferences.replace(/'/g, "''")}'`);
          if (p.existing_routines) updates.push(`existing_routines = '${p.existing_routines.replace(/'/g, "''")}'`);
          updates.push(`updated_at = ${Date.now()}`);

          await this.env.USER_DB.executeQuery({
            sqlQuery: `UPDATE profiles SET ${updates.join(', ')} WHERE user_id = '${session.userId}'`
          });
        } else {
          // Create new profile
          await this.env.USER_DB.executeQuery({
            sqlQuery: `INSERT INTO profiles (
              id, user_id, health_mobility, health_constraints, interests,
              social_preference, time_preferences, existing_routines, created_at, updated_at
            ) VALUES (
              '${profileId}',
              '${session.userId}',
              '${p.health_mobility || 'medium'}',
              '${(p.health_constraints || '').replace(/'/g, "''")}',
              '${(p.interests || '').replace(/'/g, "''")}',
              '${p.social_preference || 'small-groups'}',
              '${(p.time_preferences || '').replace(/'/g, "''")}',
              '${(p.existing_routines || '').replace(/'/g, "''")}',
              ${Date.now()},
              ${Date.now()}
            )`
          });
        }
      }

      return new Response(JSON.stringify({
        success: true,
        message: 'Profile updated successfully'
      }), {
        headers: { 'Content-Type': 'application/json' }
      });

    } catch (error) {
      return new Response(JSON.stringify({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  }

  private async initUserDatabase(): Promise<Response> {
    try {
      // Split schema into individual statements
      const statements = USER_DB_SCHEMA
        .split(';')
        .map(s => s.trim())
        .filter(s => s.length > 0);

      const results = [];
      for (const statement of statements) {
        const result = await this.env.USER_DB.executeQuery({
          sqlQuery: statement
        });
        results.push({
          statement: statement.substring(0, 50) + '...',
          status: result.status,
          message: result.message
        });
      }

      return new Response(JSON.stringify({
        success: true,
        message: 'User database initialized',
        results
      }), {
        headers: { 'Content-Type': 'application/json' }
      });
    } catch (error) {
      return new Response(JSON.stringify({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  }

  private async createSchema(): Promise<Response> {
    try {
      const schema = `CREATE TABLE IF NOT EXISTS activities (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL,
        description TEXT NOT NULL,
        category TEXT CHECK(category IN ('fitness', 'arts-culture', 'volunteering', 'learning', 'social', 'hobbies')) NOT NULL,
        location TEXT NOT NULL,
        venue TEXT,
        schedule_type TEXT CHECK(schedule_type IN ('evergreen', 'dated')) NOT NULL,
        schedule_details TEXT,
        difficulty_level INTEGER CHECK(difficulty_level BETWEEN 1 AND 5),
        social_size TEXT CHECK(social_size IN ('solo', 'small', 'medium', 'large')),
        cost TEXT CHECK(cost IN ('free', 'low', 'medium', 'high')),
        health_requirements TEXT,
        data_source TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )`;

      const result = await this.env.ACTIVITY_DB.executeQuery({
        sqlQuery: schema
      });

      return new Response(JSON.stringify({
        success: true,
        result
      }), {
        headers: { 'Content-Type': 'application/json' }
      });
    } catch (error) {
      return new Response(JSON.stringify({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  }

  private async getActivities(): Promise<Response> {
    try {
      const result = await this.env.ACTIVITY_DB.executeQuery({
        sqlQuery: 'SELECT * FROM activities LIMIT 10'
      });

      return new Response(JSON.stringify({
        success: true,
        result
      }), {
        headers: { 'Content-Type': 'application/json' }
      });
    } catch (error) {
      return new Response(JSON.stringify({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  }

  private async testRecommendations(request: Request): Promise<Response> {
    try {
      const profile = await request.json() as UserProfile;

      if (!profile.interests || profile.interests.length === 0) {
        return new Response(JSON.stringify({
          success: false,
          error: 'User profile must include at least one interest'
        }), {
          status: 400,
          headers: { 'Content-Type': 'application/json' }
        });
      }

      // Fetch all activities
      const result = await this.env.ACTIVITY_DB.executeQuery({
        sqlQuery: 'SELECT * FROM activities'
      });

      if (result.status !== 200 || !result.results) {
        return new Response(JSON.stringify({
          success: false,
          error: 'Failed to fetch activities from database'
        }), {
          status: 500,
          headers: { 'Content-Type': 'application/json' }
        });
      }

      const dbActivities: Activity[] = JSON.parse(result.results);

      // Score activities
      const scoredActivities = dbActivities
        .map(activity => this.scoreActivity(activity, profile))
        .sort((a, b) => b.score - a.score);

      // Get top 5 with diversity
      const recommendations = this.selectDiverseRecommendations(scoredActivities, 5);

      return new Response(JSON.stringify({
        success: true,
        recommendations,
        totalActivitiesConsidered: dbActivities.length
      }), {
        headers: { 'Content-Type': 'application/json' }
      });

    } catch (error) {
      return new Response(JSON.stringify({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  }

  private scoreActivity(activity: Activity, profile: UserProfile): ScoredActivity {
    let score = 0;
    const matchReasons: string[] = [];

    // Interest match (40 points)
    if (profile.interests.includes(activity.category)) {
      score += 40;
      matchReasons.push(`Matches your interest in ${activity.category}`);
    }

    // Physical capability (25 points)
    const difficultyDiff = Math.abs(activity.difficulty_level - profile.physicalCapability);
    if (difficultyDiff === 0) {
      score += 25;
      matchReasons.push('Perfect difficulty match');
    } else if (difficultyDiff === 1) {
      score += 15;
      matchReasons.push('Good difficulty match');
    } else if (difficultyDiff === 2) {
      score += 5;
    }
    if (activity.difficulty_level > profile.physicalCapability + 1) {
      score -= 10;
    }

    // Social size (20 points)
    if (profile.socialPreference === 'any' || activity.social_size === profile.socialPreference) {
      score += 20;
      if (profile.socialPreference !== 'any') {
        matchReasons.push(`Matches your ${profile.socialPreference} group preference`);
      }
    }

    // Cost (15 points)
    if (profile.costPreference === 'any' || activity.cost === profile.costPreference) {
      score += 15;
      if (activity.cost === 'free') {
        matchReasons.push('Free activity');
      }
    } else {
      const costOrder = ['free', 'low', 'medium', 'high'];
      const prefIndex = costOrder.indexOf(profile.costPreference);
      const activityIndex = costOrder.indexOf(activity.cost);
      if (activityIndex > prefIndex) {
        score -= 10;
      }
    }

    // Schedule conflict check (10 points bonus / -20 penalty)
    const hasConflict = this.hasScheduleConflict(activity.schedule_details, profile.unavailableTimes || []);
    if (!hasConflict) {
      score += 10;
    } else {
      score -= 20;
      matchReasons.push('⚠️ Potential schedule conflict');
    }

    return { ...activity, score, matchReasons };
  }

  private hasScheduleConflict(scheduleDetails: string, unavailableTimes: string[]): boolean {
    for (const unavailable of unavailableTimes) {
      if (scheduleDetails.toLowerCase().includes(unavailable.toLowerCase())) {
        return true;
      }
    }
    return false;
  }

  private selectDiverseRecommendations(scoredActivities: ScoredActivity[], count: number): ScoredActivity[] {
    const selected: ScoredActivity[] = [];
    const categoriesUsed = new Set<string>();

    for (const activity of scoredActivities) {
      if (selected.length >= count) break;
      if (!categoriesUsed.has(activity.category) || selected.length >= count - 2) {
        selected.push(activity);
        categoriesUsed.add(activity.category);
      }
    }

    for (const activity of scoredActivities) {
      if (selected.length >= count) break;
      if (!selected.includes(activity)) {
        selected.push(activity);
      }
    }

    return selected;
  }

  private async seedActivities(): Promise<Response> {
    try {
      // Clear existing activities first
      await this.env.ACTIVITY_DB.executeQuery({
        sqlQuery: 'DELETE FROM activities'
      });

      // Insert all activities
      let inserted = 0;
      const errors: string[] = [];
      for (const activity of activities) {
        try {
          const result = await this.env.ACTIVITY_DB.executeQuery({
            sqlQuery: `INSERT INTO activities (
              id, name, description, category, location, venue,
              schedule_type, schedule_details, difficulty_level,
              social_size, cost, health_requirements, data_source
            ) VALUES (
              '${activity.id}',
              '${activity.name.replace(/'/g, "''")}',
              '${activity.description.replace(/'/g, "''")}',
              '${activity.category}',
              '${activity.location.replace(/'/g, "''")}',
              '${activity.venue.replace(/'/g, "''")}',
              '${activity.schedule_type}',
              '${activity.schedule_details.replace(/'/g, "''")}',
              ${activity.difficulty_level},
              '${activity.social_size}',
              '${activity.cost}',
              '${activity.health_requirements.replace(/'/g, "''")}',
              '${activity.data_source.replace(/'/g, "''")}'
            )`
          });
          if (result.status === 200) {
            inserted++;
          } else {
            errors.push(`${activity.id}: status ${result.status} - ${result.message}`);
          }
        } catch (err) {
          errors.push(`${activity.id}: ${err instanceof Error ? err.message : 'unknown error'}`);
        }
      }

      return new Response(JSON.stringify({
        success: true,
        message: `Successfully seeded ${inserted} activities`,
        total: activities.length,
        errors: errors.length > 0 ? errors : undefined
      }), {
        headers: { 'Content-Type': 'application/json' }
      });
    } catch (error) {
      return new Response(JSON.stringify({
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error'
      }), {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      });
    }
  }
}
